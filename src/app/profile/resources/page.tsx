"use client";

import React, { useEffect, useState, useRef } from "react";
import { fetchResources, createResource, updateResource, deleteResource, Resource } from "../../api/resources";
import { FaPencilAlt, FaTrash, FaTimes } from "react-icons/fa";

// Define types that match your Django model
type ResourceType = 'Seed' | 'Fertilizer' | 'Pesticide' | 'Equipment' | 'Other';
type UsageStatus = 'Available' | 'In Use' | 'Depleted';
type MeasurementUnit = 'Bags' | 'Kilograms' | 'Liters' | 'Tons' | 'Units' | 'Other';

// Type for new resources (without backend-generated fields)
type NewResource = Omit<Resource, "id" | "resource_id" | "created_at" | "updated_at" | "user">;

export default function ResourcesPage() {
  const [resources, setResources] = useState<Resource[]>([]);
  const [newResource, setNewResource] = useState<NewResource>({
    name: "",
    quantity: 0,
    unit: "Units",
    resource_type: "Other",
    usage_status: "Available",
  });
  const [editingResource, setEditingResource] = useState<Resource | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<string | null>(null);
  const deleteRef = useRef<HTMLDivElement>(null);

  // Close popup when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (deleteRef.current && !deleteRef.current.contains(event.target as Node)) {
        setShowDeleteConfirm(null);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // Load resources on mount
  useEffect(() => {
    loadResources();
  }, []);

  const loadResources = async () => {
    try {
      const data = await fetchResources();
      setResources(data);
    } catch (error) {
      console.error("Failed to load resources:", error);
    }
  };


  const handleCreateResource = async () => {
    if (!newResource.name || newResource.quantity === undefined) {
      alert("Resource name and quantity are required.");
      return;
    }
    try {
      // The API will handle adding resource_id and user
      const createdResource = await createResource({
        ...newResource,
        quantity: Number(newResource.quantity),
        // These fields will be added by the backend:
        resource_id: "", // Will be generated by backend
        user: "", // Will be set by backend from cookies
      });
      
      setResources([createdResource, ...resources]);
      setNewResource({ 
        name: "", 
        quantity: 0, 
        unit: "Units", 
        resource_type: "Other", 
        usage_status: "Available" 
      });
    } catch (error) {
      console.error("Failed to create resource:", error);
      alert("Failed to create resource. Please try again.");
    }
  };

  const handleUpdateResource = async () => {
    if (!editingResource) return;
    try {
      const updatedResource = await updateResource(
        editingResource.resource_id,
        {
          ...editingResource,
          quantity: Math.max(0, Number(editingResource.quantity)), // Ensure non-negative
        }
      );
      setResources(resources.map(r => 
        r.resource_id === editingResource.resource_id ? updatedResource : r
      ));
      setEditingResource(null);
    } catch (error) {
      console.error("Failed to update resource:", error);
      alert("Failed to update resource. Please try again.");
    }
  };

  const handleDeleteResource = async (resourceId: string) => {
    try {
      await deleteResource(resourceId);
      setResources(resources.filter(r => r.resource_id !== resourceId));
      setShowDeleteConfirm(null);
    } catch (error) {
      console.error("Failed to delete resource:", error);
      alert("Failed to delete resource. Please try again.");
    }
  };

  return (
    <div className="p-6  min-h-screen relative">
      <h1 className="text-2xl font-bold flex items-center gap-2">Resources Management üõ†Ô∏è</h1>

      {/* Create Resource Form */}
      <div className="flex flex-wrap gap-2 mt-4 mb-4">
        <input
          type="text"
          placeholder="Resource Name"
          value={newResource.name}
          onChange={(e) => setNewResource(prev => ({ ...prev, name: e.target.value }))}
          className="border p-2 rounded w-full md:w-1/4"
          required
        />
        <input
          type="number"
          placeholder="Quantity"
          min="0"
          value={newResource.quantity}
          onChange={(e) => setNewResource(prev => ({ 
            ...prev, 
            quantity: Math.max(0, Number(e.target.value)) 
          }))}
          className="border p-2 rounded w-full md:w-1/6"
          required
        />
        <select
          value={newResource.unit}
          onChange={(e) => setNewResource(prev => ({ 
            ...prev, 
            unit: e.target.value as MeasurementUnit 
          }))}
          className="border p-2 rounded w-full md:w-1/6"
        >
          {['Bags', 'Kilograms', 'Liters', 'Tons', 'Units', 'Other'].map(unit => (
            <option key={unit} value={unit}>{unit}</option>
          ))}
        </select>
        <select
          value={newResource.resource_type}
          onChange={(e) => setNewResource(prev => ({ 
            ...prev, 
            resource_type: e.target.value as ResourceType 
          }))}
          className="border p-2 rounded w-full md:w-1/6"
        >
          {['Seed', 'Fertilizer', 'Pesticide', 'Equipment', 'Other'].map(type => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
        <button 
          onClick={handleCreateResource}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 w-full md:w-auto"
        >
          + Add Resource
        </button>
      </div>

      {/* Resources Table */}
      <h2 className="text-lg font-semibold">Available Inventory</h2>
      <div className="">
        <table className="w-full border-collapse mt-4">
          <thead>
            <tr className="bg-green-50 ">
              <th className="p-2 text-left">Name</th>
              <th className="p-2 text-left">Quantity</th>
              <th className="p-2 text-left">Unit</th>
              <th className="p-2 text-left">Type</th>
              <th className="p-2 text-left">Status</th>
              <th className="p-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {resources.length > 0 ? (
              resources.map(resource => (
                <tr key={resource.resource_id} className="border-t hover:bg-gray-50">
                  <td className="p-2">{resource.name}</td>
                  <td className="p-2">{resource.quantity}</td>
                  <td className="p-2">{resource.unit}</td>
                  <td className="p-2">{resource.resource_type}</td>
                  <td className="p-2">{resource.usage_status}</td>
                  <td className="p-2 flex gap-2">
                    <button 
                      onClick={() => setEditingResource(resource)}
                      className="text-green-500 hover:text-green-300"
                      aria-label="Edit"
                    >
                      <FaPencilAlt />
                    </button>
                    <button 
                      onClick={() => setShowDeleteConfirm(resource.resource_id)}
                      className="text-red-500 hover:text-red-700"
                      aria-label="Delete"
                    >
                      <FaTrash />
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={6} className="p-4 text-center text-gray-500">
                  No resources found
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Delete Confirmation Popup */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div 
            ref={deleteRef}
            className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md"
          >
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-bold">Confirm Deletion</h3>
              <button 
                onClick={() => setShowDeleteConfirm(null)}
                className="text-gray-500 hover:text-gray-700"
              >
                <FaTimes />
              </button>
            </div>
            <p className="mb-4">Are you sure you want to delete this resource? This action cannot be undone.</p>
            <div className="flex justify-end gap-2">
              <button
                onClick={() => setShowDeleteConfirm(null)}
                className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
              >
                Cancel
              </button>
              <button
                onClick={() => handleDeleteResource(showDeleteConfirm)}
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Resource Modal */}
      {editingResource && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Edit Resource</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">Name*</label>
                <input
                  type="text"
                  value={editingResource.name}
                  onChange={(e) => setEditingResource({...editingResource, name: e.target.value})}
                  className="w-full border p-2 rounded"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Quantity*</label>
                <input
                  type="number"
                  min="0"
                  value={editingResource.quantity}
                  onChange={(e) => setEditingResource({
                    ...editingResource, 
                    quantity: Math.max(0, Number(e.target.value))
                  })}
                  className="w-full border p-2 rounded"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Unit</label>
                <select
                  value={editingResource.unit}
                  onChange={(e) => setEditingResource({
                    ...editingResource, 
                    unit: e.target.value as MeasurementUnit
                  })}
                  className="w-full border p-2 rounded"
                >
                  {['Bags', 'Kilograms', 'Liters', 'Tons', 'Units', 'Other'].map(unit => (
                    <option key={unit} value={unit}>{unit}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Type</label>
                <select
                  value={editingResource.resource_type}
                  onChange={(e) => setEditingResource({
                    ...editingResource, 
                    resource_type: e.target.value as ResourceType
                  })}
                  className="w-full border p-2 rounded"
                >
                  {['Seed', 'Fertilizer', 'Pesticide', 'Equipment', 'Other'].map(type => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Status</label>
                <select
                  value={editingResource.usage_status}
                  onChange={(e) => setEditingResource({
                    ...editingResource, 
                    usage_status: e.target.value as UsageStatus
                  })}
                  className="w-full border p-2 rounded"
                >
                  {['Available', 'In Use', 'Depleted'].map(status => (
                    <option key={status} value={status}>{status}</option>
                  ))}
                </select>
              </div>
              <div className="flex justify-end gap-2 mt-4">
                <button
                  onClick={() => setEditingResource(null)}
                  className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
                >
                  Cancel
                </button>
                <button
                  onClick={handleUpdateResource}
                  className="px-4 py-2 bg-green-500 text-white rounded hover:bg-blue-600"
                >
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}